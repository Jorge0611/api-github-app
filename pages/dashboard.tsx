/* eslint-disable react-hooks/exhaustive-deps */
import type { NextPage } from "next";
import { AnimateSharedLayout, AnimatePresence } from "framer-motion";
import Head from "next/head";
import Item from "../components/Item";
import List from "../components/List";
import { Octokit } from "@octokit/core";
import { useEffect, useState } from "react";

const Dashboard: NextPage = () => {
  const octokit = new Octokit({
    auth: process.env.NEXT_PUBLIC_GITHUB_PERSONAL_TOKEN!,
  });
  const [repos, setRepos] = useState<any>([]);
  const [search, setSearch] = useState("");
  const [language, setLanguage] = useState("");
  const [loading, isLoading] = useState(false);

  const [identifier, setIdentifier] = useState("");
  const [open, isOpen] = useState(false);

  async function getRepos(search: string = "react", language: string = "") {
    isLoading(true);
    await octokit
      .request("GET /search/repositories", {
        q: `${search.toLowerCase()}+language:${language.toLowerCase()}`,
      })
      .then((res) => {
        setRepos(res.data.items);
        isLoading(false);
      })
      .catch((err) => console.error(err));
  }

  useEffect(() => {
    getRepos().then(() => console.log("Repos loaded"));
  }, []);

  return (
    <div
      className="bg-scroll md:bg-fixed bg-cover bg-center w-full min-h-screen "
      style={{ backgroundImage: `url("/background-blur.jpeg")` }}
    >
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href={"/favicon.ico"} />
      </Head>
      <main className="text-white">
        <div className="p-3 md:p-20">
          <div className="bg-cool-gray-800 px-4 md:px-12 py-6 rounded-md shadow-lg">
            <div className="flex flex-col md:flex-row md:justify-center md:space-x-4">
              <input
                type="text"
                placeholder="Search..."
                className="bg-cool-gray-500 md:w-5/12 rounded-md text-md md:text-xl py-2 px-4 shadow-inner"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
              />
              <div className="flex justify-between mt-4 md:mt-0 space-x-4">
                <select
                  value={language}
                  onChange={(e) => setLanguage(e.target.value)}
                  className="px-4 py-1 w-full text-cool-gray-300 bg-transparent border border-1 border-cool-gray-300 hover:text-cool-gray-500 hover:border-cool-gray-500 rounded-md"
                  name="languages"
                  id="languages"
                >
                  <option value=""></option>
                  <option value="javascript">Javascript</option>
                  <option value="typescript">Typescript</option>
                  <option value="go">Go</option>
                  <option value="python">Python</option>
                  <option value="php">PHP</option>
                  <option value="cpp">CPP</option>
                  <option value="java">Java</option>
                </select>

                <button
                  onClick={() => getRepos(search, language)}
                  className="px-4 py-1 w-full text-cool-gray-300 bg-transparent border border-1 border-cool-gray-300 hover:text-cool-gray-500 hover:border-cool-gray-500 rounded-md"
                >
                  Search
                </button>
              </div>
            </div>
          </div>

          <div className="relative bg-cool-gray-800 p-6 rounded-md shadow-lg mt-8">
            {loading ? (
              <div className="flex flex-row justify-center items-center w-full">
                <div className="flex flex-col items-center">
                  <div
                    style={{ borderTopColor: "transparent" }}
                    className="w-16 h-16 border-4 border-blue-400 border-solid rounded-full animate-spin"
                  ></div>

                  <span className="mt-2 tracking-widest font-semibold">
                    L o a d i n g
                  </span>
                </div>
              </div>
            ) : (
              <AnimateSharedLayout>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {repos.map((data: any, key: number) => (
                    <List
                      key={`card-list-${key}`}
                      id={data.id}
                      name={data.name}
                      fullName={data.full_name}
                      language={data.language}
                      description={data.description}
                      htmlUrl={data.html_url}
                      onClick={() => {
                        setIdentifier(data.id);
                        isOpen(true);
                      }}
                    />
                  ))}
                </div>
                <AnimatePresence>
                  {identifier && open && (
                    <Item
                      key={`card-list-${identifier}`}
                      id={identifier}
                      repos={repos}
                      onClick={() => {
                        setIdentifier("");
                        isOpen(false);
                      }}
                    />
                  )}
                </AnimatePresence>
              </AnimateSharedLayout>
            )}
          </div>
        </div>
      </main>
      <footer></footer>
    </div>
  );
};

export default Dashboard;
